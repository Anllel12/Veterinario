<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFxcXCdcXFx6XFxcw1tbW+JbW1v5W1tb+VtbW+FbW1vCW1tbeV5eXiYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFxcXDJbW1u7W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W7laWlowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEBAQARbW1uSW1tb/VtbW/9bW1vyW1tbpVxcXFNeXl4mYGBgCGBgYAheXl4mXFxcU1tb
        W6ZbW1vyW1tb/1tbW/1cXFyOQEBABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        +H//B+D//8AD///4H/////////////////8=
</value>
  </data>
</root>